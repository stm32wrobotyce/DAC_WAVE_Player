
DAC_WAVE_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000c6b10  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080cad5c  080cad5c  000e000c  2**0
                  CONTENTS
  4 .ARM          00000008  080cad5c  080cad5c  000dad5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080cad64  080cad64  000e000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080cad64  080cad64  000dad64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080cad68  080cad68  000dad68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080cad6c  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  2000000c  080cad78  000e000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  080cad78  000e0594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000e000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bb7  00000000  00000000  000e003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c54  00000000  00000000  000f3bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000f6848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  000f7918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027854  00000000  00000000  000f8898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143f5  00000000  00000000  001200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1e94  00000000  00000000  001344e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00226375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b4  00000000  00000000  002263c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004234 	.word	0x08004234

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004234 	.word	0x08004234

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2224      	movs	r2, #36	; 0x24
 80004ca:	2100      	movs	r1, #0
 80004cc:	4618      	mov	r0, r3
 80004ce:	f003 fea9 	bl	8004224 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <MX_DAC1_Init+0x5c>)
 80004d4:	4a12      	ldr	r2, [pc, #72]	; (8000520 <MX_DAC1_Init+0x60>)
 80004d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004d8:	4810      	ldr	r0, [pc, #64]	; (800051c <MX_DAC1_Init+0x5c>)
 80004da:	f000 fe76 	bl	80011ca <HAL_DAC_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004e4:	f000 f9bb 	bl	800085e <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80004ec:	2304      	movs	r3, #4
 80004ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <MX_DAC1_Init+0x5c>)
 8000504:	f000 ff9f 	bl	8001446 <HAL_DAC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800050e:	f000 f9a6 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	3728      	adds	r7, #40	; 0x28
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028
 8000520:	40007400 	.word	0x40007400

08000524 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a2b      	ldr	r2, [pc, #172]	; (80005f0 <HAL_DAC_MspInit+0xcc>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d14f      	bne.n	80005e6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <HAL_DAC_MspInit+0xd0>)
 8000548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054a:	4a2a      	ldr	r2, [pc, #168]	; (80005f4 <HAL_DAC_MspInit+0xd0>)
 800054c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000550:	6593      	str	r3, [r2, #88]	; 0x58
 8000552:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <HAL_DAC_MspInit+0xd0>)
 8000554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <HAL_DAC_MspInit+0xd0>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a24      	ldr	r2, [pc, #144]	; (80005f4 <HAL_DAC_MspInit+0xd0>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <HAL_DAC_MspInit+0xd0>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000576:	2310      	movs	r3, #16
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057a:	2303      	movs	r3, #3
 800057c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f001 fb36 	bl	8001bfc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 8000592:	4a1a      	ldr	r2, [pc, #104]	; (80005fc <HAL_DAC_MspInit+0xd8>)
 8000594:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 8000598:	2206      	movs	r2, #6
 800059a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 800059e:	2210      	movs	r2, #16
 80005a0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 80005b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005b4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 80005b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005bc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 80005cc:	f001 f8e0 	bl	8001790 <HAL_DMA_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80005d6:	f000 f942 	bl	800085e <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <HAL_DAC_MspInit+0xd4>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	; 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40007400 	.word	0x40007400
 80005f4:	40021000 	.word	0x40021000
 80005f8:	2000003c 	.word	0x2000003c
 80005fc:	40020030 	.word	0x40020030

08000600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_DMA_Init+0x38>)
 8000608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800060a:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <MX_DMA_Init+0x38>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6493      	str	r3, [r2, #72]	; 0x48
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_DMA_Init+0x38>)
 8000614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	200d      	movs	r0, #13
 8000624:	f000 fd9b 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000628:	200d      	movs	r0, #13
 800062a:	f000 fdb4 	bl	8001196 <HAL_NVIC_EnableIRQ>

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <MX_GPIO_Init+0xc4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <MX_GPIO_Init+0xc4>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <MX_GPIO_Init+0xc4>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <MX_GPIO_Init+0xc4>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a24      	ldr	r2, [pc, #144]	; (8000700 <MX_GPIO_Init+0xc4>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b22      	ldr	r3, [pc, #136]	; (8000700 <MX_GPIO_Init+0xc4>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_GPIO_Init+0xc4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <MX_GPIO_Init+0xc4>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_GPIO_Init+0xc4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_GPIO_Init+0xc4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MX_GPIO_Init+0xc4>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_GPIO_Init+0xc4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2120      	movs	r1, #32
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f001 fc49 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_GPIO_Init+0xc8>)
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_GPIO_Init+0xcc>)
 80006d4:	f001 fa92 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006d8:	2320      	movs	r3, #32
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f001 fa83 	bl	8001bfc <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	10210000 	.word	0x10210000
 8000708:	48000800 	.word	0x48000800

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 fbaa 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f818 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f7ff ff90 	bl	800063c <MX_GPIO_Init>
  MX_DMA_Init();
 800071c:	f7ff ff70 	bl	8000600 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000720:	f000 f982 	bl	8000a28 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000724:	f7ff fecc 	bl	80004c0 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000728:	f000 f928 	bl	800097c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  wave_player_init(&htim6, &hdac1);
 800072c:	4903      	ldr	r1, [pc, #12]	; (800073c <main+0x30>)
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <main+0x34>)
 8000730:	f000 f9ec 	bl	8000b0c <wave_player_init>
  wave_player_start(audio_file);
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <main+0x38>)
 8000736:	f000 f9fd 	bl	8000b34 <wave_player_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073a:	e7fe      	b.n	800073a <main+0x2e>
 800073c:	20000028 	.word	0x20000028
 8000740:	20000084 	.word	0x20000084
 8000744:	08004294 	.word	0x08004294

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0b8      	sub	sp, #224	; 0xe0
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000752:	2244      	movs	r2, #68	; 0x44
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fd64 	bl	8004224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fd56 	bl	8004224 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000786:	2310      	movs	r3, #16
 8000788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800079e:	230a      	movs	r3, #10
 80007a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a4:	2307      	movs	r3, #7
 80007a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fc44 	bl	8002048 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007c6:	f000 f84a 	bl	800085e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2303      	movs	r3, #3
 80007d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007ec:	2104      	movs	r1, #4
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 f810 	bl	8002814 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007fa:	f000 f830 	bl	800085e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007fe:	2302      	movs	r3, #2
 8000800:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000802:	2300      	movs	r3, #0
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fa09 	bl	8002c20 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000814:	f000 f823 	bl	800085e <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000818:	f44f 7000 	mov.w	r0, #512	; 0x200
 800081c:	f001 fbbe 	bl	8001f9c <HAL_PWREx_ControlVoltageScaling>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000826:	f000 f81a 	bl	800085e <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	37e0      	adds	r7, #224	; 0xe0
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	wave_player_prepare_half_buffer(SECOND_HALF_OF_BUFFER);
 800083a:	2002      	movs	r0, #2
 800083c:	f000 fa4e 	bl	8000cdc <wave_player_prepare_half_buffer>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	wave_player_prepare_half_buffer(FIRST_HALF_OF_BUFFER);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fa43 	bl	8000cdc <wave_player_prepare_half_buffer>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000862:	b672      	cpsid	i
}
 8000864:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000866:	e7fe      	b.n	8000866 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6613      	str	r3, [r2, #96]	; 0x60
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x44>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6593      	str	r3, [r2, #88]	; 0x58
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 fb10 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <DMA1_Channel3_IRQHandler+0x10>)
 800090a:	f001 f897 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000003c 	.word	0x2000003c

08000918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <SystemInit+0x5c>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <SystemInit+0x5c>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <SystemInit+0x60>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a11      	ldr	r2, [pc, #68]	; (8000978 <SystemInit+0x60>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <SystemInit+0x60>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <SystemInit+0x60>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <SystemInit+0x60>)
 8000944:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000948:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800094c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <SystemInit+0x60>)
 8000950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000954:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <SystemInit+0x60>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a07      	ldr	r2, [pc, #28]	; (8000978 <SystemInit+0x60>)
 800095c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000960:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <SystemInit+0x60>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00
 8000978:	40021000 	.word	0x40021000

0800097c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_TIM6_Init+0x64>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_TIM6_Init+0x68>)
 8000990:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_TIM6_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_TIM6_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_TIM6_Init+0x64>)
 80009a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_TIM6_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_TIM6_Init+0x64>)
 80009ae:	f002 fdf3 	bl	8003598 <HAL_TIM_Base_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009b8:	f7ff ff51 	bl	800085e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009bc:	2320      	movs	r3, #32
 80009be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_TIM6_Init+0x64>)
 80009ca:	f002 ff3f 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009d4:	f7ff ff43 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000084 	.word	0x20000084
 80009e4:	40001000 	.word	0x40001000

080009e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_TIM_Base_MspInit+0x38>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d10b      	bne.n	8000a12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_TIM_Base_MspInit+0x3c>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_TIM_Base_MspInit+0x3c>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6593      	str	r3, [r2, #88]	; 0x58
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HAL_TIM_Base_MspInit+0x3c>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40001000 	.word	0x40001000
 8000a24:	40021000 	.word	0x40021000

08000a28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_USART2_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f002 ff76 	bl	800395c <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f7ff fef2 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000d0 	.word	0x200000d0
 8000a84:	40004400 	.word	0x40004400

08000a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x7c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d128      	bne.n	8000afc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ada:	230c      	movs	r3, #12
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aea:	2307      	movs	r3, #7
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f001 f880 	bl	8001bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40021000 	.word	0x40021000

08000b0c <wave_player_init>:
#include "main.h"

struct wave_player_s wave_player;

void wave_player_init(TIM_HandleTypeDef *_htim, DAC_HandleTypeDef *_hdac)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	wave_player.htim = _htim;
 8000b16:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <wave_player_init+0x24>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6013      	str	r3, [r2, #0]
	wave_player.hdac = _hdac;
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <wave_player_init+0x24>)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	6053      	str	r3, [r2, #4]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000154 	.word	0x20000154

08000b34 <wave_player_start>:

void wave_player_start(uint8_t *file)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	6078      	str	r0, [r7, #4]
	int8_t status;

	status = wave_player_read_header(file);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f827 	bl	8000b90 <wave_player_read_header>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73fb      	strb	r3, [r7, #15]

	if(ERROR == status)
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d017      	beq.n	8000b7e <wave_player_start+0x4a>
	{
		return;
	}

	wave_player_set_timer_arr(wave_player.file_hdr.wave_file_hdr.sample_rate);
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <wave_player_start+0x54>)
 8000b50:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f865 	bl	8000c24 <wave_player_set_timer_arr>

	wave_player_prepare_first_buffer();
 8000b5a:	f000 f87f 	bl	8000c5c <wave_player_prepare_first_buffer>

	HAL_TIM_Base_Start(wave_player.htim);
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <wave_player_start+0x54>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fd70 	bl	8003648 <HAL_TIM_Base_Start>
	HAL_DAC_Start_DMA(wave_player.hdac, DAC_CHANNEL_1, (uint32_t *)wave_player.buffer, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_L);
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <wave_player_start+0x54>)
 8000b6a:	6858      	ldr	r0, [r3, #4]
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <wave_player_start+0x58>)
 8000b76:	2100      	movs	r1, #0
 8000b78:	f000 fb4a 	bl	8001210 <HAL_DAC_Start_DMA>
 8000b7c:	e000      	b.n	8000b80 <wave_player_start+0x4c>
		return;
 8000b7e:	bf00      	nop
}
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000154 	.word	0x20000154
 8000b8c:	20000160 	.word	0x20000160

08000b90 <wave_player_read_header>:

int8_t wave_player_read_header(uint8_t *file)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	uint32_t i;

	wave_player.data_pointer = file;
 8000b98:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <wave_player_read_header+0x84>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6093      	str	r3, [r2, #8]

	for(i = 0; i < WAVE_FILE_HEADER_SIZE; i++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	e00e      	b.n	8000bc2 <wave_player_read_header+0x32>
	{
		wave_player.file_hdr.bytes[i] = *(wave_player.data_pointer+i);
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <wave_player_read_header+0x84>)
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	7819      	ldrb	r1, [r3, #0]
 8000bae:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <wave_player_read_header+0x84>)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8000bb8:	460a      	mov	r2, r1
 8000bba:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < WAVE_FILE_HEADER_SIZE; i++)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b2b      	cmp	r3, #43	; 0x2b
 8000bc6:	d9ed      	bls.n	8000ba4 <wave_player_read_header+0x14>
	}

	if(RIFF_HDR_CONST != wave_player.file_hdr.wave_file_hdr.riff_hdr)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <wave_player_read_header+0x84>)
 8000bca:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <wave_player_read_header+0x88>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d001      	beq.n	8000bd8 <wave_player_read_header+0x48>
	{
		return ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e017      	b.n	8000c08 <wave_player_read_header+0x78>
	}

	if(WAVE_ID_CONST != wave_player.file_hdr.wave_file_hdr.wave_id)
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <wave_player_read_header+0x84>)
 8000bda:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <wave_player_read_header+0x8c>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d001      	beq.n	8000be8 <wave_player_read_header+0x58>
	{
		return ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e00f      	b.n	8000c08 <wave_player_read_header+0x78>
	}

	if(FMT_CONST != wave_player.file_hdr.wave_file_hdr.chunk_marker)
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <wave_player_read_header+0x84>)
 8000bea:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000bee:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <wave_player_read_header+0x90>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d001      	beq.n	8000bf8 <wave_player_read_header+0x68>
	{
		return ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e007      	b.n	8000c08 <wave_player_read_header+0x78>
	}

	if(CHANNEL_MONO != wave_player.file_hdr.wave_file_hdr.channels)
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <wave_player_read_header+0x84>)
 8000bfa:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d001      	beq.n	8000c06 <wave_player_read_header+0x76>
	{
		return ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <wave_player_read_header+0x78>
	}

	return SUCCESS;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	20000154 	.word	0x20000154
 8000c18:	46464952 	.word	0x46464952
 8000c1c:	45564157 	.word	0x45564157
 8000c20:	20746d66 	.word	0x20746d66

08000c24 <wave_player_set_timer_arr>:

void wave_player_set_timer_arr(uint32_t sample_rate)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	uint32_t arr;

	arr = HAL_RCC_GetPCLK1Freq() / sample_rate;
 8000c2c:	f001 ff6c 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8000c30:	4602      	mov	r2, r0
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c38:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_AUTORELOAD(wave_player.htim, arr - 1);
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <wave_player_set_timer_arr+0x34>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	3a01      	subs	r2, #1
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <wave_player_set_timer_arr+0x34>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	60da      	str	r2, [r3, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000154 	.word	0x20000154

08000c5c <wave_player_prepare_first_buffer>:

void wave_player_prepare_first_buffer(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
	int32_t i;
	int16_t audio_sample;

	wave_player.byte_counter = WAVE_FILE_HEADER_SIZE;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <wave_player_prepare_first_buffer+0x7c>)
 8000c64:	222c      	movs	r2, #44	; 0x2c
 8000c66:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	for(i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	e028      	b.n	8000cc2 <wave_player_prepare_first_buffer+0x66>
	{
		audio_sample = (*(wave_player.data_pointer+(wave_player.byte_counter+1)) << 8) | *(wave_player.data_pointer+wave_player.byte_counter);
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <wave_player_prepare_first_buffer+0x7c>)
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <wave_player_prepare_first_buffer+0x7c>)
 8000c76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	b21a      	sxth	r2, r3
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <wave_player_prepare_first_buffer+0x7c>)
 8000c86:	6899      	ldr	r1, [r3, #8]
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <wave_player_prepare_first_buffer+0x7c>)
 8000c8a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000c8e:	440b      	add	r3, r1
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	807b      	strh	r3, [r7, #2]

		wave_player.buffer[i] = (audio_sample + 32768);
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <wave_player_prepare_first_buffer+0x7c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	460a      	mov	r2, r1
 8000cac:	809a      	strh	r2, [r3, #4]

		wave_player.byte_counter += 2;
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <wave_player_prepare_first_buffer+0x7c>)
 8000cb0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <wave_player_prepare_first_buffer+0x7c>)
 8000cb8:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
	for(i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cc8:	dbd2      	blt.n	8000c70 <wave_player_prepare_first_buffer+0x14>
	}
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	20000154 	.word	0x20000154

08000cdc <wave_player_prepare_half_buffer>:

void wave_player_prepare_half_buffer(uint8_t half_number)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	int32_t i;
	int16_t audio_sample;

	if(FIRST_HALF_OF_BUFFER == half_number)
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d13e      	bne.n	8000d6a <wave_player_prepare_half_buffer+0x8e>
	{
		for(i = 0; i < AUDIO_BUFFER_SIZE/2; i++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e037      	b.n	8000d62 <wave_player_prepare_half_buffer+0x86>
		{
			audio_sample = (*(wave_player.data_pointer+(wave_player.byte_counter+1)) << 8) | *(wave_player.data_pointer+wave_player.byte_counter);
 8000cf2:	4b46      	ldr	r3, [pc, #280]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	4b45      	ldr	r3, [pc, #276]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000cf8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	4b41      	ldr	r3, [pc, #260]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d08:	6899      	ldr	r1, [r3, #8]
 8000d0a:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000d10:	440b      	add	r3, r1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	817b      	strh	r3, [r7, #10]

			wave_player.buffer[i] = (audio_sample + 32768);
 8000d1a:	897b      	ldrh	r3, [r7, #10]
 8000d1c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000d20:	b299      	uxth	r1, r3
 8000d22:	4a3a      	ldr	r2, [pc, #232]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3304      	adds	r3, #4
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	809a      	strh	r2, [r3, #4]

			wave_player.byte_counter += 2;
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000d36:	3302      	adds	r3, #2
 8000d38:	4a34      	ldr	r2, [pc, #208]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d3a:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c

			if(wave_player.byte_counter >= wave_player.file_hdr.wave_file_hdr.data_size)
 8000d3e:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d40:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d46:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d306      	bcc.n	8000d5c <wave_player_prepare_half_buffer+0x80>
			{
				HAL_DAC_Stop_DMA(wave_player.hdac, DAC_CHANNEL_1);
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fb27 	bl	80013a8 <HAL_DAC_Stop_DMA>
				return;
 8000d5a:	e053      	b.n	8000e04 <wave_player_prepare_half_buffer+0x128>
		for(i = 0; i < AUDIO_BUFFER_SIZE/2; i++)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2bff      	cmp	r3, #255	; 0xff
 8000d66:	ddc4      	ble.n	8000cf2 <wave_player_prepare_half_buffer+0x16>
 8000d68:	e04c      	b.n	8000e04 <wave_player_prepare_half_buffer+0x128>
			}
		}
	}
	else if(SECOND_HALF_OF_BUFFER == half_number)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d149      	bne.n	8000e04 <wave_player_prepare_half_buffer+0x128>
	{
		HAL_DAC_Start_DMA(wave_player.hdac, DAC_CHANNEL_1, (uint32_t *)wave_player.buffer, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_L);
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d72:	6858      	ldr	r0, [r3, #4]
 8000d74:	2304      	movs	r3, #4
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7c:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <wave_player_prepare_half_buffer+0x134>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f000 fa46 	bl	8001210 <HAL_DAC_Start_DMA>

		for(i = AUDIO_BUFFER_SIZE/2; i < AUDIO_BUFFER_SIZE; i++)
 8000d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e037      	b.n	8000dfc <wave_player_prepare_half_buffer+0x120>
		{
			audio_sample = (*(wave_player.data_pointer+(wave_player.byte_counter+1)) << 8) | *(wave_player.data_pointer+wave_player.byte_counter);
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000d92:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000d96:	3301      	adds	r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000da2:	6899      	ldr	r1, [r3, #8]
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000da6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000daa:	440b      	add	r3, r1
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	4313      	orrs	r3, r2
 8000db2:	817b      	strh	r3, [r7, #10]

			wave_player.buffer[i] = (audio_sample + 32768);
 8000db4:	897b      	ldrh	r3, [r7, #10]
 8000db6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000dba:	b299      	uxth	r1, r3
 8000dbc:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	809a      	strh	r2, [r3, #4]

			wave_player.byte_counter += 2;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000dcc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000dd4:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c

			if(wave_player.byte_counter >= wave_player.file_hdr.wave_file_hdr.data_size)
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000dda:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000de0:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d306      	bcc.n	8000df6 <wave_player_prepare_half_buffer+0x11a>
			{
				HAL_DAC_Stop_DMA(wave_player.hdac, DAC_CHANNEL_1);
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <wave_player_prepare_half_buffer+0x130>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fada 	bl	80013a8 <HAL_DAC_Stop_DMA>
				return;
 8000df4:	e006      	b.n	8000e04 <wave_player_prepare_half_buffer+0x128>
		for(i = AUDIO_BUFFER_SIZE/2; i < AUDIO_BUFFER_SIZE; i++)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e02:	dbc3      	blt.n	8000d8c <wave_player_prepare_half_buffer+0xb0>
			}
		}
	}
}
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000154 	.word	0x20000154
 8000e10:	20000160 	.word	0x20000160

08000e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e18:	f7ff fd7e 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e1e:	e003      	b.n	8000e28 <LoopCopyDataInit>

08000e20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e26:	3104      	adds	r1, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e30:	d3f6      	bcc.n	8000e20 <CopyDataInit>
	ldr	r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e34:	e002      	b.n	8000e3c <LoopFillZerobss>

08000e36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e38:	f842 3b04 	str.w	r3, [r2], #4

08000e3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <LoopForever+0x16>)
	cmp	r2, r3
 8000e3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e40:	d3f9      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f003 f9cb 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e46:	f7ff fc61 	bl	800070c <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e50:	080cad6c 	.word	0x080cad6c
	ldr	r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e58:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e5c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e60:	20000594 	.word	0x20000594

08000e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_Init+0x3c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <HAL_Init+0x3c>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f000 f962 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 f80f 	bl	8000ea8 <HAL_InitTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	e001      	b.n	8000e9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e96:	f7ff fce7 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_InitTick+0x6c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d023      	beq.n	8000f04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_InitTick+0x70>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_InitTick+0x6c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f96d 	bl	80011b2 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10f      	bne.n	8000efe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d809      	bhi.n	8000ef8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f937 	bl	800115e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_InitTick+0x74>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e007      	b.n	8000f08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e004      	b.n	8000f08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e001      	b.n	8000f08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000590 	.word	0x20000590

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000590 	.word	0x20000590

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffde 	bl	8000f48 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff29 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff3e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff31 	bl	800100c <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e014      	b.n	8001206 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff f999 	bl	8000524 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2202      	movs	r2, #2
 80011f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	795b      	ldrb	r3, [r3, #5]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_DAC_Start_DMA+0x1e>
 800122a:	2302      	movs	r3, #2
 800122c:	e0ab      	b.n	8001386 <HAL_DAC_Start_DMA+0x176>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2201      	movs	r2, #1
 8001232:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2202      	movs	r2, #2
 8001238:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d12f      	bne.n	80012a0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_DAC_Start_DMA+0x180>)
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a51      	ldr	r2, [pc, #324]	; (8001394 <HAL_DAC_Start_DMA+0x184>)
 800124e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <HAL_DAC_Start_DMA+0x188>)
 8001256:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001266:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d013      	beq.n	8001296 <HAL_DAC_Start_DMA+0x86>
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	2b08      	cmp	r3, #8
 8001272:	d845      	bhi.n	8001300 <HAL_DAC_Start_DMA+0xf0>
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_DAC_Start_DMA+0x72>
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d005      	beq.n	800128c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001280:	e03e      	b.n	8001300 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3308      	adds	r3, #8
 8001288:	613b      	str	r3, [r7, #16]
        break;
 800128a:	e03c      	b.n	8001306 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	330c      	adds	r3, #12
 8001292:	613b      	str	r3, [r7, #16]
        break;
 8001294:	e037      	b.n	8001306 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3310      	adds	r3, #16
 800129c:	613b      	str	r3, [r7, #16]
        break;
 800129e:	e032      	b.n	8001306 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4a3d      	ldr	r2, [pc, #244]	; (800139c <HAL_DAC_Start_DMA+0x18c>)
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4a3c      	ldr	r2, [pc, #240]	; (80013a0 <HAL_DAC_Start_DMA+0x190>)
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4a3b      	ldr	r2, [pc, #236]	; (80013a4 <HAL_DAC_Start_DMA+0x194>)
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d013      	beq.n	80012f6 <HAL_DAC_Start_DMA+0xe6>
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d817      	bhi.n	8001304 <HAL_DAC_Start_DMA+0xf4>
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_DAC_Start_DMA+0xd2>
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d005      	beq.n	80012ec <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80012e0:	e010      	b.n	8001304 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3314      	adds	r3, #20
 80012e8:	613b      	str	r3, [r7, #16]
        break;
 80012ea:	e00c      	b.n	8001306 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3318      	adds	r3, #24
 80012f2:	613b      	str	r3, [r7, #16]
        break;
 80012f4:	e007      	b.n	8001306 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	331c      	adds	r3, #28
 80012fc:	613b      	str	r3, [r7, #16]
        break;
 80012fe:	e002      	b.n	8001306 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001300:	bf00      	nop
 8001302:	e000      	b.n	8001306 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001304:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d111      	bne.n	8001330 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800131a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6898      	ldr	r0, [r3, #8]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	f000 faeb 	bl	8001900 <HAL_DMA_Start_IT>
 800132a:	4603      	mov	r3, r0
 800132c:	75fb      	strb	r3, [r7, #23]
 800132e:	e010      	b.n	8001352 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800133e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68d8      	ldr	r0, [r3, #12]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	f000 fad9 	bl	8001900 <HAL_DMA_Start_IT>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6819      	ldr	r1, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2201      	movs	r2, #1
 800136c:	409a      	lsls	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e005      	b.n	8001384 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	f043 0204 	orr.w	r2, r3, #4
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001384:	7dfb      	ldrb	r3, [r7, #23]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	0800167b 	.word	0x0800167b
 8001394:	0800169d 	.word	0x0800169d
 8001398:	080016b9 	.word	0x080016b9
 800139c:	08001723 	.word	0x08001723
 80013a0:	08001745 	.word	0x08001745
 80013a4:	08001761 	.word	0x08001761

080013a8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	400a      	ands	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2201      	movs	r2, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10d      	bne.n	800140e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fae2 	bl	80019c0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e00c      	b.n	8001428 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fad4 	bl	80019c0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001426:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b088      	sub	sp, #32
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_DAC_ConfigChannel+0x1c>
 800145e:	2302      	movs	r3, #2
 8001460:	e107      	b.n	8001672 <HAL_DAC_ConfigChannel+0x22c>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2202      	movs	r2, #2
 800146c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b04      	cmp	r3, #4
 8001474:	d174      	bne.n	8001560 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001476:	f7ff fd67 	bl	8000f48 <HAL_GetTick>
 800147a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d134      	bne.n	80014ec <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001482:	e011      	b.n	80014a8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001484:	f7ff fd60 	bl	8000f48 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d90a      	bls.n	80014a8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f043 0208 	orr.w	r2, r3, #8
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2203      	movs	r2, #3
 80014a2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0e4      	b.n	8001672 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1e6      	bne.n	8001484 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff fd52 	bl	8000f60 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	6992      	ldr	r2, [r2, #24]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
 80014c6:	e01e      	b.n	8001506 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80014c8:	f7ff fd3e 	bl	8000f48 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d90a      	bls.n	80014ec <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	f043 0208 	orr.w	r2, r3, #8
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2203      	movs	r2, #3
 80014e6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0c2      	b.n	8001672 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	dbe8      	blt.n	80014c8 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff fd32 	bl	8000f60 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	6992      	ldr	r2, [r2, #24]
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	ea02 0103 	and.w	r1, r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	69da      	ldr	r2, [r3, #28]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	409a      	lsls	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	21ff      	movs	r1, #255	; 0xff
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	ea02 0103 	and.w	r1, r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	6a1a      	ldr	r2, [r3, #32]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d11d      	bne.n	80015a4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	221f      	movs	r2, #31
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015aa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2207      	movs	r2, #7
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6819      	ldr	r1, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43da      	mvns	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	400a      	ands	r2, r1
 8001608:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	f640 72fc 	movw	r2, #4092	; 0xffc
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6819      	ldr	r1, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	22c0      	movs	r2, #192	; 0xc0
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	400a      	ands	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3720      	adds	r7, #32
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff f8d2 	bl	8000832 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2201      	movs	r2, #1
 8001692:	711a      	strb	r2, [r3, #4]
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff f8cc 	bl	8000848 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f043 0204 	orr.w	r2, r3, #4
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7ff fead 	bl	8001432 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	711a      	strb	r2, [r3, #4]
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff ffd8 	bl	80016e6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	711a      	strb	r2, [r3, #4]
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f7ff ffd1 	bl	80016fa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f043 0204 	orr.w	r2, r3, #4
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7ff ffc7 	bl	800170e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	711a      	strb	r2, [r3, #4]
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e098      	b.n	80018d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <HAL_DMA_Init+0x150>)
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d80f      	bhi.n	80017ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <HAL_DMA_Init+0x154>)
 80017b6:	4413      	add	r3, r2
 80017b8:	4a4b      	ldr	r2, [pc, #300]	; (80018e8 <HAL_DMA_Init+0x158>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	009a      	lsls	r2, r3, #2
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_DMA_Init+0x15c>)
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
 80017cc:	e00e      	b.n	80017ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_DMA_Init+0x160>)
 80017d6:	4413      	add	r3, r2
 80017d8:	4a43      	ldr	r2, [pc, #268]	; (80018e8 <HAL_DMA_Init+0x158>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	009a      	lsls	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <HAL_DMA_Init+0x164>)
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001806:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001846:	d039      	beq.n	80018bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_DMA_Init+0x15c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d11a      	bne.n	8001888 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001852:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <HAL_DMA_Init+0x168>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 031c 	and.w	r3, r3, #28
 800185e:	210f      	movs	r1, #15
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	4924      	ldr	r1, [pc, #144]	; (80018f8 <HAL_DMA_Init+0x168>)
 8001868:	4013      	ands	r3, r2
 800186a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800186c:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_DMA_Init+0x168>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	f003 031c 	and.w	r3, r3, #28
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	491d      	ldr	r1, [pc, #116]	; (80018f8 <HAL_DMA_Init+0x168>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
 8001886:	e019      	b.n	80018bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_DMA_Init+0x16c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	f003 031c 	and.w	r3, r3, #28
 8001894:	210f      	movs	r1, #15
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	4917      	ldr	r1, [pc, #92]	; (80018fc <HAL_DMA_Init+0x16c>)
 800189e:	4013      	ands	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_DMA_Init+0x16c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 031c 	and.w	r3, r3, #28
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	4911      	ldr	r1, [pc, #68]	; (80018fc <HAL_DMA_Init+0x16c>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40020407 	.word	0x40020407
 80018e4:	bffdfff8 	.word	0xbffdfff8
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	40020000 	.word	0x40020000
 80018f0:	bffdfbf8 	.word	0xbffdfbf8
 80018f4:	40020400 	.word	0x40020400
 80018f8:	400200a8 	.word	0x400200a8
 80018fc:	400204a8 	.word	0x400204a8

08001900 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_DMA_Start_IT+0x20>
 800191c:	2302      	movs	r3, #2
 800191e:	e04b      	b.n	80019b8 <HAL_DMA_Start_IT+0xb8>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d13a      	bne.n	80019aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f91e 	bl	8001b9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 020e 	orr.w	r2, r2, #14
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e00f      	b.n	8001998 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0204 	bic.w	r2, r2, #4
 8001986:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 020a 	orr.w	r2, r2, #10
 8001996:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e005      	b.n	80019b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
 80019b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d008      	beq.n	80019ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2204      	movs	r2, #4
 80019dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e022      	b.n	8001a30 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 020e 	bic.w	r2, r2, #14
 80019f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f003 021c 	and.w	r2, r3, #28
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	f003 031c 	and.w	r3, r3, #28
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d026      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x7a>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d021      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d107      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	f003 021c 	and.w	r2, r3, #28
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d071      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001ab4:	e06c      	b.n	8001b90 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 031c 	and.w	r3, r3, #28
 8001abe:	2202      	movs	r2, #2
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d02e      	beq.n	8001b28 <HAL_DMA_IRQHandler+0xec>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d029      	beq.n	8001b28 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10b      	bne.n	8001afa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 020a 	bic.w	r2, r2, #10
 8001af0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f003 021c 	and.w	r2, r3, #28
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2102      	movs	r1, #2
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d038      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b26:	e033      	b.n	8001b90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	f003 031c 	and.w	r3, r3, #28
 8001b30:	2208      	movs	r2, #8
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d02a      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x156>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d025      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 020e 	bic.w	r2, r2, #14
 8001b54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f003 021c 	and.w	r2, r3, #28
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
}
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f003 021c 	and.w	r2, r3, #28
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d108      	bne.n	8001bde <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bdc:	e007      	b.n	8001bee <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	60da      	str	r2, [r3, #12]
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	e17f      	b.n	8001f0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8171 	beq.w	8001f06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d00b      	beq.n	8001c44 <HAL_GPIO_Init+0x48>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d007      	beq.n	8001c44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c38:	2b11      	cmp	r3, #17
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b12      	cmp	r3, #18
 8001c42:	d130      	bne.n	8001ca6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 0201 	and.w	r2, r3, #1
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d118      	bne.n	8001ce4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	08db      	lsrs	r3, r3, #3
 8001cce:	f003 0201 	and.w	r2, r3, #1
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x128>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	6939      	ldr	r1, [r7, #16]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80ac 	beq.w	8001f06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_GPIO_Init+0x334>)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001df0:	d025      	beq.n	8001e3e <HAL_GPIO_Init+0x242>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4f      	ldr	r2, [pc, #316]	; (8001f34 <HAL_GPIO_Init+0x338>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <HAL_GPIO_Init+0x23e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4e      	ldr	r2, [pc, #312]	; (8001f38 <HAL_GPIO_Init+0x33c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x23a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <HAL_GPIO_Init+0x340>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x236>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <HAL_GPIO_Init+0x344>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x232>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4b      	ldr	r2, [pc, #300]	; (8001f44 <HAL_GPIO_Init+0x348>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x22e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <HAL_GPIO_Init+0x34c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x22a>
 8001e22:	2306      	movs	r3, #6
 8001e24:	e00c      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e00a      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e008      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e004      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	f002 0203 	and.w	r2, r2, #3
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4093      	lsls	r3, r2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e50:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_GPIO_Init+0x334>)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e82:	4a32      	ldr	r2, [pc, #200]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eac:	4a27      	ldr	r2, [pc, #156]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb2:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f47f ae78 	bne.w	8001c0c <HAL_GPIO_Init+0x10>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010000 	.word	0x40010000
 8001f34:	48000400 	.word	0x48000400
 8001f38:	48000800 	.word	0x48000800
 8001f3c:	48000c00 	.word	0x48000c00
 8001f40:	48001000 	.word	0x48001000
 8001f44:	48001400 	.word	0x48001400
 8001f48:	48001800 	.word	0x48001800
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001faa:	d130      	bne.n	800200e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb8:	d038      	beq.n	800202c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2232      	movs	r2, #50	; 0x32
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe0:	e002      	b.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff4:	d102      	bne.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f2      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002008:	d110      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e00f      	b.n	800202e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201a:	d007      	beq.n	800202c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002024:	4a05      	ldr	r2, [pc, #20]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000
 8002040:	20000000 	.word	0x20000000
 8002044:	431bde83 	.word	0x431bde83

08002048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e3d4      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205a:	4ba1      	ldr	r3, [pc, #644]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002064:	4b9e      	ldr	r3, [pc, #632]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80e4 	beq.w	8002244 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_RCC_OscConfig+0x4a>
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	f040 808b 	bne.w	80021a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b01      	cmp	r3, #1
 800208e:	f040 8087 	bne.w	80021a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x62>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e3ac      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	4b8c      	ldr	r3, [pc, #560]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_RCC_OscConfig+0x7c>
 80020ba:	4b89      	ldr	r3, [pc, #548]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_OscConfig+0x88>
 80020c4:	4b86      	ldr	r3, [pc, #536]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d223      	bcs.n	800211c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fd41 	bl	8002b60 <RCC_SetFlashLatencyFromMSIRange>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e38d      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e8:	4b7d      	ldr	r3, [pc, #500]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a7c      	ldr	r2, [pc, #496]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b7a      	ldr	r3, [pc, #488]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4977      	ldr	r1, [pc, #476]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002106:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	4972      	ldr	r1, [pc, #456]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
 800211a:	e025      	b.n	8002168 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211c:	4b70      	ldr	r3, [pc, #448]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a6f      	ldr	r2, [pc, #444]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b6d      	ldr	r3, [pc, #436]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	496a      	ldr	r1, [pc, #424]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213a:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	4965      	ldr	r1, [pc, #404]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fd01 	bl	8002b60 <RCC_SetFlashLatencyFromMSIRange>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e34d      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002168:	f000 fc36 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	495a      	ldr	r1, [pc, #360]	; (80022e4 <HAL_RCC_OscConfig+0x29c>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <HAL_RCC_OscConfig+0x2a0>)
 8002186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002188:	4b58      	ldr	r3, [pc, #352]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fe8b 	bl	8000ea8 <HAL_InitTick>
 8002192:	4603      	mov	r3, r0
 8002194:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d052      	beq.n	8002242 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	e331      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d032      	beq.n	800220e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a8:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4c      	ldr	r2, [pc, #304]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b4:	f7fe fec8 	bl	8000f48 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021bc:	f7fe fec4 	bl	8000f48 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e31a      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ce:	4b44      	ldr	r3, [pc, #272]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021da:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a40      	ldr	r2, [pc, #256]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	493b      	ldr	r1, [pc, #236]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	4936      	ldr	r1, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
 800220c:	e01a      	b.n	8002244 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a33      	ldr	r2, [pc, #204]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800221a:	f7fe fe95 	bl	8000f48 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002222:	f7fe fe91 	bl	8000f48 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e2e7      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x1da>
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002242:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d074      	beq.n	800233a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x21a>
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	d10e      	bne.n	800227a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d10b      	bne.n	800227a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002262:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d064      	beq.n	8002338 <HAL_RCC_OscConfig+0x2f0>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d160      	bne.n	8002338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e2c4      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x24a>
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e01d      	b.n	80022ce <HAL_RCC_OscConfig+0x286>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229a:	d10c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x26e>
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80022a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e00b      	b.n	80022ce <HAL_RCC_OscConfig+0x286>
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80022bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x298>)
 80022c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01c      	beq.n	8002310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fe37 	bl	8000f48 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022dc:	e011      	b.n	8002302 <HAL_RCC_OscConfig+0x2ba>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	0800424c 	.word	0x0800424c
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe fe2a 	bl	8000f48 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e280      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	4baf      	ldr	r3, [pc, #700]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2a8>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fe1a 	bl	8000f48 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fe16 	bl	8000f48 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e26c      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232a:	4ba5      	ldr	r3, [pc, #660]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x2d0>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d060      	beq.n	8002408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d005      	beq.n	8002358 <HAL_RCC_OscConfig+0x310>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d119      	bne.n	8002386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d116      	bne.n	8002386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002358:	4b99      	ldr	r3, [pc, #612]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_OscConfig+0x328>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e249      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b93      	ldr	r3, [pc, #588]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	4990      	ldr	r1, [pc, #576]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002384:	e040      	b.n	8002408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d023      	beq.n	80023d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238e:	4b8c      	ldr	r3, [pc, #560]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a8b      	ldr	r2, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fdd5 	bl	8000f48 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7fe fdd1 	bl	8000f48 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e227      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b4:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b7f      	ldr	r3, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	497c      	ldr	r1, [pc, #496]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
 80023d4:	e018      	b.n	8002408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b7a      	ldr	r3, [pc, #488]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a79      	ldr	r2, [pc, #484]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80023dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7fe fdb1 	bl	8000f48 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ea:	f7fe fdad 	bl	8000f48 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e203      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fc:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03c      	beq.n	800248e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01c      	beq.n	8002456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241c:	4b68      	ldr	r3, [pc, #416]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002422:	4a67      	ldr	r2, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe fd8c 	bl	8000f48 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002434:	f7fe fd88 	bl	8000f48 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1de      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002446:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ef      	beq.n	8002434 <HAL_RCC_OscConfig+0x3ec>
 8002454:	e01b      	b.n	800248e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b5a      	ldr	r3, [pc, #360]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245c:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe fd6f 	bl	8000f48 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246e:	f7fe fd6b 	bl	8000f48 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1c1      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002480:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80a6 	beq.w	80025e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249c:	2300      	movs	r3, #0
 800249e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024a0:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	4a43      	ldr	r2, [pc, #268]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6593      	str	r3, [r2, #88]	; 0x58
 80024b8:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c8:	4b3e      	ldr	r3, [pc, #248]	; (80025c4 <HAL_RCC_OscConfig+0x57c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d118      	bne.n	8002506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_RCC_OscConfig+0x57c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a3a      	ldr	r2, [pc, #232]	; (80025c4 <HAL_RCC_OscConfig+0x57c>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e0:	f7fe fd32 	bl	8000f48 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7fe fd2e 	bl	8000f48 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e184      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fa:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_RCC_OscConfig+0x57c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d108      	bne.n	8002520 <HAL_RCC_OscConfig+0x4d8>
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	4a2a      	ldr	r2, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800251e:	e024      	b.n	800256a <HAL_RCC_OscConfig+0x522>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d110      	bne.n	800254a <HAL_RCC_OscConfig+0x502>
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	4a24      	ldr	r2, [pc, #144]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002548:	e00f      	b.n	800256a <HAL_RCC_OscConfig+0x522>
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002552:	f023 0301 	bic.w	r3, r3, #1
 8002556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002562:	f023 0304 	bic.w	r3, r3, #4
 8002566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7fe fce9 	bl	8000f48 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fce5 	bl	8000f48 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e139      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x578>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ed      	beq.n	800257a <HAL_RCC_OscConfig+0x532>
 800259e:	e01a      	b.n	80025d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7fe fcd2 	bl	8000f48 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a6:	e00f      	b.n	80025c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe fcce 	bl	8000f48 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d906      	bls.n	80025c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e122      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c8:	4b90      	ldr	r3, [pc, #576]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e8      	bne.n	80025a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d6:	7ffb      	ldrb	r3, [r7, #31]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025dc:	4b8b      	ldr	r3, [pc, #556]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	4a8a      	ldr	r2, [pc, #552]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80025e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8108 	beq.w	8002802 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	f040 80d0 	bne.w	800279c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025fc:	4b83      	ldr	r3, [pc, #524]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	429a      	cmp	r2, r3
 800260e:	d130      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	3b01      	subs	r3, #1
 800261c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d127      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d11f      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800263c:	2a07      	cmp	r2, #7
 800263e:	bf14      	ite	ne
 8002640:	2201      	movne	r2, #1
 8002642:	2200      	moveq	r2, #0
 8002644:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002646:	4293      	cmp	r3, r2
 8002648:	d113      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	3b01      	subs	r3, #1
 8002658:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d109      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d06e      	beq.n	8002750 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d069      	beq.n	800274c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002678:	4b64      	ldr	r3, [pc, #400]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0b7      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002694:	4b5d      	ldr	r3, [pc, #372]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a5c      	ldr	r2, [pc, #368]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 800269a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026a0:	f7fe fc52 	bl	8000f48 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fc4e 	bl	8000f48 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0a4      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ba:	4b54      	ldr	r3, [pc, #336]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c6:	4b51      	ldr	r3, [pc, #324]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	4b51      	ldr	r3, [pc, #324]	; (8002810 <HAL_RCC_OscConfig+0x7c8>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026e0:	0212      	lsls	r2, r2, #8
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026e8:	0852      	lsrs	r2, r2, #1
 80026ea:	3a01      	subs	r2, #1
 80026ec:	0552      	lsls	r2, r2, #21
 80026ee:	4311      	orrs	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026f4:	0852      	lsrs	r2, r2, #1
 80026f6:	3a01      	subs	r2, #1
 80026f8:	0652      	lsls	r2, r2, #25
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002700:	0912      	lsrs	r2, r2, #4
 8002702:	0452      	lsls	r2, r2, #17
 8002704:	430a      	orrs	r2, r1
 8002706:	4941      	ldr	r1, [pc, #260]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a3e      	ldr	r2, [pc, #248]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002718:	4b3c      	ldr	r3, [pc, #240]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a3b      	ldr	r2, [pc, #236]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002724:	f7fe fc10 	bl	8000f48 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fc0c 	bl	8000f48 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e062      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	4b33      	ldr	r3, [pc, #204]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274a:	e05a      	b.n	8002802 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e059      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002750:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d152      	bne.n	8002802 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2a      	ldr	r2, [pc, #168]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002768:	4b28      	ldr	r3, [pc, #160]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a27      	ldr	r2, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002774:	f7fe fbe8 	bl	8000f48 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fbe4 	bl	8000f48 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e03a      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x734>
 800279a:	e032      	b.n	8002802 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d02d      	beq.n	80027fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a19      	ldr	r2, [pc, #100]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80027a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80027c0:	f023 0303 	bic.w	r3, r3, #3
 80027c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80027cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fbb7 	bl	8000f48 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fbb3 	bl	8000f48 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e009      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_OscConfig+0x7c4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x796>
 80027fc:	e001      	b.n	8002802 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	f99d808c 	.word	0xf99d808c

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0c8      	b.n	80029ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b66      	ldr	r3, [pc, #408]	; (80029c4 <HAL_RCC_ClockConfig+0x1b0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d910      	bls.n	8002858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4961      	ldr	r1, [pc, #388]	; (80029c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b0      	b.n	80029ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d04c      	beq.n	80028fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d107      	bne.n	800287c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286c:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d121      	bne.n	80028bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e09e      	b.n	80029ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d107      	bne.n	8002894 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d115      	bne.n	80028bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e092      	b.n	80029ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800289c:	4b4a      	ldr	r3, [pc, #296]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e086      	b.n	80029ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ac:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e07e      	b.n	80029ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028bc:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 0203 	bic.w	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	493f      	ldr	r1, [pc, #252]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ce:	f7fe fb3b 	bl	8000f48 <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d6:	f7fe fb37 	bl	8000f48 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e066      	b.n	80029ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ec:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 020c 	and.w	r2, r3, #12
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d1eb      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290a:	4b2f      	ldr	r3, [pc, #188]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	492c      	ldr	r1, [pc, #176]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800291c:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_RCC_ClockConfig+0x1b0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d210      	bcs.n	800294c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_RCC_ClockConfig+0x1b0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0207 	bic.w	r2, r3, #7
 8002932:	4924      	ldr	r1, [pc, #144]	; (80029c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_RCC_ClockConfig+0x1b0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e036      	b.n	80029ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4918      	ldr	r1, [pc, #96]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4910      	ldr	r1, [pc, #64]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800298a:	f000 f825 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 800298e:	4602      	mov	r2, r0
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	490c      	ldr	r1, [pc, #48]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	5ccb      	ldrb	r3, [r1, r3]
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fa7a 	bl	8000ea8 <HAL_InitTick>
 80029b4:	4603      	mov	r3, r0
 80029b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80029b8:	7afb      	ldrb	r3, [r7, #11]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40021000 	.word	0x40021000
 80029cc:	0800424c 	.word	0x0800424c
 80029d0:	20000000 	.word	0x20000000
 80029d4:	20000004 	.word	0x20000004

080029d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e6:	4b3e      	ldr	r3, [pc, #248]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f0:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x34>
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d121      	bne.n	8002a4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d11e      	bne.n	8002a4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a0c:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a18:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	e005      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a28:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a34:	4a2b      	ldr	r2, [pc, #172]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10d      	bne.n	8002a60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d102      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	e004      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_RCC_GetSysClockFreq+0x114>)
 8002a5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d134      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0xa6>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d003      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0xac>
 8002a7c:	e005      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a80:	617b      	str	r3, [r7, #20]
      break;
 8002a82:	e005      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_GetSysClockFreq+0x114>)
 8002a86:	617b      	str	r3, [r7, #20]
      break;
 8002a88:	e002      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	617b      	str	r3, [r7, #20]
      break;
 8002a8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	fb02 f203 	mul.w	r2, r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	0e5b      	lsrs	r3, r3, #25
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	; 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08004264 	.word	0x08004264
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	007a1200 	.word	0x007a1200

08002af0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b0c:	f7ff fff0 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	0800425c 	.word	0x0800425c

08002b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b38:	f7ff ffda 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0adb      	lsrs	r3, r3, #11
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4904      	ldr	r1, [pc, #16]	; (8002b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	0800425c 	.word	0x0800425c

08002b60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b78:	f7ff fa02 	bl	8001f80 <HAL_PWREx_GetVoltageRange>
 8002b7c:	6178      	str	r0, [r7, #20]
 8002b7e:	e014      	b.n	8002baa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b8c:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b98:	f7ff f9f2 	bl	8001f80 <HAL_PWREx_GetVoltageRange>
 8002b9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb0:	d10b      	bne.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d919      	bls.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2ba0      	cmp	r3, #160	; 0xa0
 8002bbc:	d902      	bls.n	8002bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	e013      	b.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	e010      	b.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	d902      	bls.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	e00a      	b.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d102      	bne.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bdc:	2302      	movs	r3, #2
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e004      	b.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b70      	cmp	r3, #112	; 0x70
 8002be6:	d101      	bne.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be8:	2301      	movs	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 0207 	bic.w	r2, r3, #7
 8002bf4:	4909      	ldr	r1, [pc, #36]	; (8002c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d001      	beq.n	8002c0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40022000 	.word	0x40022000

08002c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c28:	2300      	movs	r3, #0
 8002c2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d041      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c44:	d02a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c4a:	d824      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c50:	d008      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c56:	d81e      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c60:	d010      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c62:	e018      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c64:	4b86      	ldr	r3, [pc, #536]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4a85      	ldr	r2, [pc, #532]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c70:	e015      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fabb 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c82:	e00c      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3320      	adds	r3, #32
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fba6 	bl	80033dc <RCCEx_PLLSAI2_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	74fb      	strb	r3, [r7, #19]
      break;
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca4:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb2:	4973      	ldr	r1, [pc, #460]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cba:	e001      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d041      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cd4:	d02a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cda:	d824      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce6:	d81e      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf0:	d010      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cf2:	e018      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cf4:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d00:	e015      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fa73 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d12:	e00c      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3320      	adds	r3, #32
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fb5e 	bl	80033dc <RCCEx_PLLSAI2_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d24:	e003      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	74fb      	strb	r3, [r7, #19]
      break;
 8002d2a:	e000      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d34:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d42:	494f      	ldr	r1, [pc, #316]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d4a:	e001      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80a0 	beq.w	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d82:	6593      	str	r3, [r2, #88]	; 0x58
 8002d84:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d94:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3a      	ldr	r2, [pc, #232]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002da0:	f7fe f8d2 	bl	8000f48 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002da6:	e009      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da8:	f7fe f8ce 	bl	8000f48 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d902      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	74fb      	strb	r3, [r7, #19]
        break;
 8002dba:	e005      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ef      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d15c      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01f      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d019      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df8:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	4a20      	ldr	r2, [pc, #128]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fe f88d 	bl	8000f48 <HAL_GetTick>
 8002e2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e30:	e00b      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe f889 	bl	8000f48 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d902      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	74fb      	strb	r3, [r7, #19]
            break;
 8002e48:	e006      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ec      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6e:	4904      	ldr	r1, [pc, #16]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e76:	e009      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	74bb      	strb	r3, [r7, #18]
 8002e7c:	e006      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e8c:	7c7b      	ldrb	r3, [r7, #17]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d105      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b9e      	ldr	r3, [pc, #632]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a9d      	ldr	r2, [pc, #628]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eaa:	4b98      	ldr	r3, [pc, #608]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f023 0203 	bic.w	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	4994      	ldr	r1, [pc, #592]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ecc:	4b8f      	ldr	r3, [pc, #572]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f023 020c 	bic.w	r2, r3, #12
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	498c      	ldr	r1, [pc, #560]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eee:	4b87      	ldr	r3, [pc, #540]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	4983      	ldr	r1, [pc, #524]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f10:	4b7e      	ldr	r3, [pc, #504]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	497b      	ldr	r1, [pc, #492]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f32:	4b76      	ldr	r3, [pc, #472]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f40:	4972      	ldr	r1, [pc, #456]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f54:	4b6d      	ldr	r3, [pc, #436]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	496a      	ldr	r1, [pc, #424]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f76:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	4961      	ldr	r1, [pc, #388]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f98:	4b5c      	ldr	r3, [pc, #368]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa6:	4959      	ldr	r1, [pc, #356]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fba:	4b54      	ldr	r3, [pc, #336]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc8:	4950      	ldr	r1, [pc, #320]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	4948      	ldr	r1, [pc, #288]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ffe:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	493f      	ldr	r1, [pc, #252]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d028      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003020:	4b3a      	ldr	r3, [pc, #232]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302e:	4937      	ldr	r1, [pc, #220]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800303e:	d106      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003040:	4b32      	ldr	r3, [pc, #200]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a31      	ldr	r2, [pc, #196]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304a:	60d3      	str	r3, [r2, #12]
 800304c:	e011      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003056:	d10c      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f8c8 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d028      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800307e:	4b23      	ldr	r3, [pc, #140]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	491f      	ldr	r1, [pc, #124]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800309c:	d106      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800309e:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4a1a      	ldr	r2, [pc, #104]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a8:	60d3      	str	r3, [r2, #12]
 80030aa:	e011      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f899 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c6:	7cfb      	ldrb	r3, [r7, #19]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d02b      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ea:	4908      	ldr	r1, [pc, #32]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fa:	d109      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a02      	ldr	r2, [pc, #8]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003106:	60d3      	str	r3, [r2, #12]
 8003108:	e014      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003118:	d10c      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f867 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d02f      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800314e:	4928      	ldr	r1, [pc, #160]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800315a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315e:	d10d      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f844 	bl	80031f4 <RCCEx_PLLSAI1_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d014      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	74bb      	strb	r3, [r7, #18]
 800317a:	e011      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3320      	adds	r3, #32
 800318a:	2102      	movs	r1, #2
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f925 	bl	80033dc <RCCEx_PLLSAI2_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ba:	490d      	ldr	r1, [pc, #52]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031de:	4904      	ldr	r1, [pc, #16]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000

080031f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003202:	4b75      	ldr	r3, [pc, #468]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d018      	beq.n	8003240 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0203 	and.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d10d      	bne.n	800323a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
       ||
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003226:	4b6c      	ldr	r3, [pc, #432]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
       ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d047      	beq.n	80032ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	e044      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d018      	beq.n	800327a <RCCEx_PLLSAI1_Config+0x86>
 8003248:	2b03      	cmp	r3, #3
 800324a:	d825      	bhi.n	8003298 <RCCEx_PLLSAI1_Config+0xa4>
 800324c:	2b01      	cmp	r3, #1
 800324e:	d002      	beq.n	8003256 <RCCEx_PLLSAI1_Config+0x62>
 8003250:	2b02      	cmp	r3, #2
 8003252:	d009      	beq.n	8003268 <RCCEx_PLLSAI1_Config+0x74>
 8003254:	e020      	b.n	8003298 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003256:	4b60      	ldr	r3, [pc, #384]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d11d      	bne.n	800329e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003266:	e01a      	b.n	800329e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003268:	4b5b      	ldr	r3, [pc, #364]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d116      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003278:	e013      	b.n	80032a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800327a:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10f      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003286:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003296:	e006      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e004      	b.n	80032a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329e:	bf00      	nop
 80032a0:	e002      	b.n	80032a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032a2:	bf00      	nop
 80032a4:	e000      	b.n	80032a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10d      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ae:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	3b01      	subs	r3, #1
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	430b      	orrs	r3, r1
 80032c4:	4944      	ldr	r1, [pc, #272]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d17d      	bne.n	80033cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032d0:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a40      	ldr	r2, [pc, #256]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032dc:	f7fd fe34 	bl	8000f48 <HAL_GetTick>
 80032e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e2:	e009      	b.n	80032f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e4:	f7fd fe30 	bl	8000f48 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d902      	bls.n	80032f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	73fb      	strb	r3, [r7, #15]
        break;
 80032f6:	e005      	b.n	8003304 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032f8:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ef      	bne.n	80032e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d160      	bne.n	80033cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d111      	bne.n	8003334 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003310:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6892      	ldr	r2, [r2, #8]
 8003320:	0211      	lsls	r1, r2, #8
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68d2      	ldr	r2, [r2, #12]
 8003326:	0912      	lsrs	r2, r2, #4
 8003328:	0452      	lsls	r2, r2, #17
 800332a:	430a      	orrs	r2, r1
 800332c:	492a      	ldr	r1, [pc, #168]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	610b      	str	r3, [r1, #16]
 8003332:	e027      	b.n	8003384 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d112      	bne.n	8003360 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800333a:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003342:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6892      	ldr	r2, [r2, #8]
 800334a:	0211      	lsls	r1, r2, #8
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6912      	ldr	r2, [r2, #16]
 8003350:	0852      	lsrs	r2, r2, #1
 8003352:	3a01      	subs	r2, #1
 8003354:	0552      	lsls	r2, r2, #21
 8003356:	430a      	orrs	r2, r1
 8003358:	491f      	ldr	r1, [pc, #124]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	610b      	str	r3, [r1, #16]
 800335e:	e011      	b.n	8003384 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003368:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6892      	ldr	r2, [r2, #8]
 8003370:	0211      	lsls	r1, r2, #8
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6952      	ldr	r2, [r2, #20]
 8003376:	0852      	lsrs	r2, r2, #1
 8003378:	3a01      	subs	r2, #1
 800337a:	0652      	lsls	r2, r2, #25
 800337c:	430a      	orrs	r2, r1
 800337e:	4916      	ldr	r1, [pc, #88]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003380:	4313      	orrs	r3, r2
 8003382:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800338e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fd fdda 	bl	8000f48 <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003396:	e009      	b.n	80033ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003398:	f7fd fdd6 	bl	8000f48 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d902      	bls.n	80033ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	73fb      	strb	r3, [r7, #15]
          break;
 80033aa:	e005      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ef      	beq.n	8003398 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	4904      	ldr	r1, [pc, #16]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000

080033dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ea:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d018      	beq.n	8003428 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0203 	and.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d10d      	bne.n	8003422 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
       ||
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800340e:	4b61      	ldr	r3, [pc, #388]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
       ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d047      	beq.n	80034b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
 8003426:	e044      	b.n	80034b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d018      	beq.n	8003462 <RCCEx_PLLSAI2_Config+0x86>
 8003430:	2b03      	cmp	r3, #3
 8003432:	d825      	bhi.n	8003480 <RCCEx_PLLSAI2_Config+0xa4>
 8003434:	2b01      	cmp	r3, #1
 8003436:	d002      	beq.n	800343e <RCCEx_PLLSAI2_Config+0x62>
 8003438:	2b02      	cmp	r3, #2
 800343a:	d009      	beq.n	8003450 <RCCEx_PLLSAI2_Config+0x74>
 800343c:	e020      	b.n	8003480 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800343e:	4b55      	ldr	r3, [pc, #340]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11d      	bne.n	8003486 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344e:	e01a      	b.n	8003486 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003450:	4b50      	ldr	r3, [pc, #320]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d116      	bne.n	800348a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003460:	e013      	b.n	800348a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003462:	4b4c      	ldr	r3, [pc, #304]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10f      	bne.n	800348e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800346e:	4b49      	ldr	r3, [pc, #292]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800347e:	e006      	b.n	800348e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      break;
 8003484:	e004      	b.n	8003490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003486:	bf00      	nop
 8003488:	e002      	b.n	8003490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800348e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10d      	bne.n	80034b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003496:	4b3f      	ldr	r3, [pc, #252]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6819      	ldr	r1, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	430b      	orrs	r3, r1
 80034ac:	4939      	ldr	r1, [pc, #228]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d167      	bne.n	8003588 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034b8:	4b36      	ldr	r3, [pc, #216]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a35      	ldr	r2, [pc, #212]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c4:	f7fd fd40 	bl	8000f48 <HAL_GetTick>
 80034c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034ca:	e009      	b.n	80034e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034cc:	f7fd fd3c 	bl	8000f48 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d902      	bls.n	80034e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	73fb      	strb	r3, [r7, #15]
        break;
 80034de:	e005      	b.n	80034ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034e0:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ef      	bne.n	80034cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d14a      	bne.n	8003588 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d111      	bne.n	800351c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6892      	ldr	r2, [r2, #8]
 8003508:	0211      	lsls	r1, r2, #8
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	0912      	lsrs	r2, r2, #4
 8003510:	0452      	lsls	r2, r2, #17
 8003512:	430a      	orrs	r2, r1
 8003514:	491f      	ldr	r1, [pc, #124]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	614b      	str	r3, [r1, #20]
 800351a:	e011      	b.n	8003540 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800351c:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003524:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6892      	ldr	r2, [r2, #8]
 800352c:	0211      	lsls	r1, r2, #8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6912      	ldr	r2, [r2, #16]
 8003532:	0852      	lsrs	r2, r2, #1
 8003534:	3a01      	subs	r2, #1
 8003536:	0652      	lsls	r2, r2, #25
 8003538:	430a      	orrs	r2, r1
 800353a:	4916      	ldr	r1, [pc, #88]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353c:	4313      	orrs	r3, r2
 800353e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003540:	4b14      	ldr	r3, [pc, #80]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a13      	ldr	r2, [pc, #76]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fd fcfc 	bl	8000f48 <HAL_GetTick>
 8003550:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003552:	e009      	b.n	8003568 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003554:	f7fd fcf8 	bl	8000f48 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	73fb      	strb	r3, [r7, #15]
          break;
 8003566:	e005      	b.n	8003574 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	4904      	ldr	r1, [pc, #16]	; (8003594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003584:	4313      	orrs	r3, r2
 8003586:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e049      	b.n	800363e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fa12 	bl	80009e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 f89e 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d001      	beq.n	8003660 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e047      	b.n	80036f0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <HAL_TIM_Base_Start+0xb4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01d      	beq.n	80036ae <HAL_TIM_Base_Start+0x66>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d018      	beq.n	80036ae <HAL_TIM_Base_Start+0x66>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_TIM_Base_Start+0xb8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_TIM_Base_Start+0x66>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_TIM_Base_Start+0xbc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIM_Base_Start+0x66>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_TIM_Base_Start+0xc0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_TIM_Base_Start+0x66>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_TIM_Base_Start+0xc4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIM_Base_Start+0x66>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_TIM_Base_Start+0xc8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d115      	bne.n	80036da <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_TIM_Base_Start+0xcc>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d015      	beq.n	80036ec <HAL_TIM_Base_Start+0xa4>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c6:	d011      	beq.n	80036ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	e008      	b.n	80036ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e000      	b.n	80036ee <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40013400 	.word	0x40013400
 8003710:	40014000 	.word	0x40014000
 8003714:	00010007 	.word	0x00010007

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a40      	ldr	r2, [pc, #256]	; (800382c <TIM_Base_SetConfig+0x114>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003736:	d00f      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a3d      	ldr	r2, [pc, #244]	; (8003830 <TIM_Base_SetConfig+0x118>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3c      	ldr	r2, [pc, #240]	; (8003834 <TIM_Base_SetConfig+0x11c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a3b      	ldr	r2, [pc, #236]	; (8003838 <TIM_Base_SetConfig+0x120>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3a      	ldr	r2, [pc, #232]	; (800383c <TIM_Base_SetConfig+0x124>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d108      	bne.n	800376a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2f      	ldr	r2, [pc, #188]	; (800382c <TIM_Base_SetConfig+0x114>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01f      	beq.n	80037b2 <TIM_Base_SetConfig+0x9a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d01b      	beq.n	80037b2 <TIM_Base_SetConfig+0x9a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2c      	ldr	r2, [pc, #176]	; (8003830 <TIM_Base_SetConfig+0x118>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d017      	beq.n	80037b2 <TIM_Base_SetConfig+0x9a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2b      	ldr	r2, [pc, #172]	; (8003834 <TIM_Base_SetConfig+0x11c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <TIM_Base_SetConfig+0x9a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2a      	ldr	r2, [pc, #168]	; (8003838 <TIM_Base_SetConfig+0x120>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00f      	beq.n	80037b2 <TIM_Base_SetConfig+0x9a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a29      	ldr	r2, [pc, #164]	; (800383c <TIM_Base_SetConfig+0x124>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_Base_SetConfig+0x9a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a28      	ldr	r2, [pc, #160]	; (8003840 <TIM_Base_SetConfig+0x128>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_Base_SetConfig+0x9a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a27      	ldr	r2, [pc, #156]	; (8003844 <TIM_Base_SetConfig+0x12c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0x9a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a26      	ldr	r2, [pc, #152]	; (8003848 <TIM_Base_SetConfig+0x130>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a10      	ldr	r2, [pc, #64]	; (800382c <TIM_Base_SetConfig+0x114>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00f      	beq.n	8003810 <TIM_Base_SetConfig+0xf8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <TIM_Base_SetConfig+0x124>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00b      	beq.n	8003810 <TIM_Base_SetConfig+0xf8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a11      	ldr	r2, [pc, #68]	; (8003840 <TIM_Base_SetConfig+0x128>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <TIM_Base_SetConfig+0xf8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <TIM_Base_SetConfig+0x12c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_Base_SetConfig+0xf8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a0f      	ldr	r2, [pc, #60]	; (8003848 <TIM_Base_SetConfig+0x130>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d103      	bne.n	8003818 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	615a      	str	r2, [r3, #20]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800
 8003838:	40000c00 	.word	0x40000c00
 800383c:	40013400 	.word	0x40013400
 8003840:	40014000 	.word	0x40014000
 8003844:	40014400 	.word	0x40014400
 8003848:	40014800 	.word	0x40014800

0800384c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003860:	2302      	movs	r3, #2
 8003862:	e068      	b.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2d      	ldr	r2, [pc, #180]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800389e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01d      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d6:	d018      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00e      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a13      	ldr	r2, [pc, #76]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10c      	bne.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	4313      	orrs	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40013400 	.word	0x40013400
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40014000 	.word	0x40014000

0800395c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e040      	b.n	80039f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd f882 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f82c 	bl	80039f8 <UART_SetConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 faaa 	bl	8003f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb31 	bl	8004050 <UART_CheckIdleState>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4bad      	ldr	r3, [pc, #692]	; (8003cd8 <UART_SetConfig+0x2e0>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	69f9      	ldr	r1, [r7, #28]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4aa2      	ldr	r2, [pc, #648]	; (8003cdc <UART_SetConfig+0x2e4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a99      	ldr	r2, [pc, #612]	; (8003ce0 <UART_SetConfig+0x2e8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d121      	bne.n	8003ac2 <UART_SetConfig+0xca>
 8003a7e:	4b99      	ldr	r3, [pc, #612]	; (8003ce4 <UART_SetConfig+0x2ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d817      	bhi.n	8003abc <UART_SetConfig+0xc4>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <UART_SetConfig+0x9c>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003aa5 	.word	0x08003aa5
 8003a98:	08003ab1 	.word	0x08003ab1
 8003a9c:	08003aab 	.word	0x08003aab
 8003aa0:	08003ab7 	.word	0x08003ab7
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	76fb      	strb	r3, [r7, #27]
 8003aa8:	e0e7      	b.n	8003c7a <UART_SetConfig+0x282>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	76fb      	strb	r3, [r7, #27]
 8003aae:	e0e4      	b.n	8003c7a <UART_SetConfig+0x282>
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	76fb      	strb	r3, [r7, #27]
 8003ab4:	e0e1      	b.n	8003c7a <UART_SetConfig+0x282>
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	76fb      	strb	r3, [r7, #27]
 8003aba:	e0de      	b.n	8003c7a <UART_SetConfig+0x282>
 8003abc:	2310      	movs	r3, #16
 8003abe:	76fb      	strb	r3, [r7, #27]
 8003ac0:	e0db      	b.n	8003c7a <UART_SetConfig+0x282>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a88      	ldr	r2, [pc, #544]	; (8003ce8 <UART_SetConfig+0x2f0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d132      	bne.n	8003b32 <UART_SetConfig+0x13a>
 8003acc:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <UART_SetConfig+0x2ec>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d828      	bhi.n	8003b2c <UART_SetConfig+0x134>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <UART_SetConfig+0xe8>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b15 	.word	0x08003b15
 8003ae4:	08003b2d 	.word	0x08003b2d
 8003ae8:	08003b2d 	.word	0x08003b2d
 8003aec:	08003b2d 	.word	0x08003b2d
 8003af0:	08003b21 	.word	0x08003b21
 8003af4:	08003b2d 	.word	0x08003b2d
 8003af8:	08003b2d 	.word	0x08003b2d
 8003afc:	08003b2d 	.word	0x08003b2d
 8003b00:	08003b1b 	.word	0x08003b1b
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003b2d 	.word	0x08003b2d
 8003b10:	08003b27 	.word	0x08003b27
 8003b14:	2300      	movs	r3, #0
 8003b16:	76fb      	strb	r3, [r7, #27]
 8003b18:	e0af      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	76fb      	strb	r3, [r7, #27]
 8003b1e:	e0ac      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b20:	2304      	movs	r3, #4
 8003b22:	76fb      	strb	r3, [r7, #27]
 8003b24:	e0a9      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b26:	2308      	movs	r3, #8
 8003b28:	76fb      	strb	r3, [r7, #27]
 8003b2a:	e0a6      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	76fb      	strb	r3, [r7, #27]
 8003b30:	e0a3      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6d      	ldr	r2, [pc, #436]	; (8003cec <UART_SetConfig+0x2f4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d120      	bne.n	8003b7e <UART_SetConfig+0x186>
 8003b3c:	4b69      	ldr	r3, [pc, #420]	; (8003ce4 <UART_SetConfig+0x2ec>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b46:	2b30      	cmp	r3, #48	; 0x30
 8003b48:	d013      	beq.n	8003b72 <UART_SetConfig+0x17a>
 8003b4a:	2b30      	cmp	r3, #48	; 0x30
 8003b4c:	d814      	bhi.n	8003b78 <UART_SetConfig+0x180>
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d009      	beq.n	8003b66 <UART_SetConfig+0x16e>
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d810      	bhi.n	8003b78 <UART_SetConfig+0x180>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <UART_SetConfig+0x168>
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d006      	beq.n	8003b6c <UART_SetConfig+0x174>
 8003b5e:	e00b      	b.n	8003b78 <UART_SetConfig+0x180>
 8003b60:	2300      	movs	r3, #0
 8003b62:	76fb      	strb	r3, [r7, #27]
 8003b64:	e089      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b66:	2302      	movs	r3, #2
 8003b68:	76fb      	strb	r3, [r7, #27]
 8003b6a:	e086      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	76fb      	strb	r3, [r7, #27]
 8003b70:	e083      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b72:	2308      	movs	r3, #8
 8003b74:	76fb      	strb	r3, [r7, #27]
 8003b76:	e080      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e07d      	b.n	8003c7a <UART_SetConfig+0x282>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a5b      	ldr	r2, [pc, #364]	; (8003cf0 <UART_SetConfig+0x2f8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d120      	bne.n	8003bca <UART_SetConfig+0x1d2>
 8003b88:	4b56      	ldr	r3, [pc, #344]	; (8003ce4 <UART_SetConfig+0x2ec>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b92:	2bc0      	cmp	r3, #192	; 0xc0
 8003b94:	d013      	beq.n	8003bbe <UART_SetConfig+0x1c6>
 8003b96:	2bc0      	cmp	r3, #192	; 0xc0
 8003b98:	d814      	bhi.n	8003bc4 <UART_SetConfig+0x1cc>
 8003b9a:	2b80      	cmp	r3, #128	; 0x80
 8003b9c:	d009      	beq.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b9e:	2b80      	cmp	r3, #128	; 0x80
 8003ba0:	d810      	bhi.n	8003bc4 <UART_SetConfig+0x1cc>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <UART_SetConfig+0x1b4>
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d006      	beq.n	8003bb8 <UART_SetConfig+0x1c0>
 8003baa:	e00b      	b.n	8003bc4 <UART_SetConfig+0x1cc>
 8003bac:	2300      	movs	r3, #0
 8003bae:	76fb      	strb	r3, [r7, #27]
 8003bb0:	e063      	b.n	8003c7a <UART_SetConfig+0x282>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	76fb      	strb	r3, [r7, #27]
 8003bb6:	e060      	b.n	8003c7a <UART_SetConfig+0x282>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	76fb      	strb	r3, [r7, #27]
 8003bbc:	e05d      	b.n	8003c7a <UART_SetConfig+0x282>
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	76fb      	strb	r3, [r7, #27]
 8003bc2:	e05a      	b.n	8003c7a <UART_SetConfig+0x282>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	76fb      	strb	r3, [r7, #27]
 8003bc8:	e057      	b.n	8003c7a <UART_SetConfig+0x282>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a49      	ldr	r2, [pc, #292]	; (8003cf4 <UART_SetConfig+0x2fc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d125      	bne.n	8003c20 <UART_SetConfig+0x228>
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <UART_SetConfig+0x2ec>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be2:	d017      	beq.n	8003c14 <UART_SetConfig+0x21c>
 8003be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be8:	d817      	bhi.n	8003c1a <UART_SetConfig+0x222>
 8003bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bee:	d00b      	beq.n	8003c08 <UART_SetConfig+0x210>
 8003bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf4:	d811      	bhi.n	8003c1a <UART_SetConfig+0x222>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <UART_SetConfig+0x20a>
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfe:	d006      	beq.n	8003c0e <UART_SetConfig+0x216>
 8003c00:	e00b      	b.n	8003c1a <UART_SetConfig+0x222>
 8003c02:	2300      	movs	r3, #0
 8003c04:	76fb      	strb	r3, [r7, #27]
 8003c06:	e038      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	76fb      	strb	r3, [r7, #27]
 8003c0c:	e035      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c0e:	2304      	movs	r3, #4
 8003c10:	76fb      	strb	r3, [r7, #27]
 8003c12:	e032      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c14:	2308      	movs	r3, #8
 8003c16:	76fb      	strb	r3, [r7, #27]
 8003c18:	e02f      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	76fb      	strb	r3, [r7, #27]
 8003c1e:	e02c      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2d      	ldr	r2, [pc, #180]	; (8003cdc <UART_SetConfig+0x2e4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d125      	bne.n	8003c76 <UART_SetConfig+0x27e>
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <UART_SetConfig+0x2ec>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c38:	d017      	beq.n	8003c6a <UART_SetConfig+0x272>
 8003c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c3e:	d817      	bhi.n	8003c70 <UART_SetConfig+0x278>
 8003c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c44:	d00b      	beq.n	8003c5e <UART_SetConfig+0x266>
 8003c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4a:	d811      	bhi.n	8003c70 <UART_SetConfig+0x278>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <UART_SetConfig+0x260>
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d006      	beq.n	8003c64 <UART_SetConfig+0x26c>
 8003c56:	e00b      	b.n	8003c70 <UART_SetConfig+0x278>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	76fb      	strb	r3, [r7, #27]
 8003c5c:	e00d      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	76fb      	strb	r3, [r7, #27]
 8003c62:	e00a      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c64:	2304      	movs	r3, #4
 8003c66:	76fb      	strb	r3, [r7, #27]
 8003c68:	e007      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	76fb      	strb	r3, [r7, #27]
 8003c6e:	e004      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c70:	2310      	movs	r3, #16
 8003c72:	76fb      	strb	r3, [r7, #27]
 8003c74:	e001      	b.n	8003c7a <UART_SetConfig+0x282>
 8003c76:	2310      	movs	r3, #16
 8003c78:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <UART_SetConfig+0x2e4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	f040 8087 	bne.w	8003d94 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c86:	7efb      	ldrb	r3, [r7, #27]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d837      	bhi.n	8003cfc <UART_SetConfig+0x304>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x29c>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cfd 	.word	0x08003cfd
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003cfd 	.word	0x08003cfd
 8003ca4:	08003cc7 	.word	0x08003cc7
 8003ca8:	08003cfd 	.word	0x08003cfd
 8003cac:	08003cfd 	.word	0x08003cfd
 8003cb0:	08003cfd 	.word	0x08003cfd
 8003cb4:	08003ccf 	.word	0x08003ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7fe ff26 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	6178      	str	r0, [r7, #20]
        break;
 8003cbe:	e022      	b.n	8003d06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <UART_SetConfig+0x300>)
 8003cc2:	617b      	str	r3, [r7, #20]
        break;
 8003cc4:	e01f      	b.n	8003d06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc6:	f7fe fe87 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8003cca:	6178      	str	r0, [r7, #20]
        break;
 8003ccc:	e01b      	b.n	8003d06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd2:	617b      	str	r3, [r7, #20]
        break;
 8003cd4:	e017      	b.n	8003d06 <UART_SetConfig+0x30e>
 8003cd6:	bf00      	nop
 8003cd8:	efff69f3 	.word	0xefff69f3
 8003cdc:	40008000 	.word	0x40008000
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40004400 	.word	0x40004400
 8003cec:	40004800 	.word	0x40004800
 8003cf0:	40004c00 	.word	0x40004c00
 8003cf4:	40005000 	.word	0x40005000
 8003cf8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	76bb      	strb	r3, [r7, #26]
        break;
 8003d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80f1 	beq.w	8003ef0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d305      	bcc.n	8003d2a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d902      	bls.n	8003d30 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	76bb      	strb	r3, [r7, #26]
 8003d2e:	e0df      	b.n	8003ef0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	020b      	lsls	r3, r1, #8
 8003d42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d46:	0202      	lsls	r2, r0, #8
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	6849      	ldr	r1, [r1, #4]
 8003d4c:	0849      	lsrs	r1, r1, #1
 8003d4e:	4608      	mov	r0, r1
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	1814      	adds	r4, r2, r0
 8003d56:	eb43 0501 	adc.w	r5, r3, r1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	4620      	mov	r0, r4
 8003d66:	4629      	mov	r1, r5
 8003d68:	f7fc fa2e 	bl	80001c8 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4613      	mov	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7a:	d308      	bcc.n	8003d8e <UART_SetConfig+0x396>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d82:	d204      	bcs.n	8003d8e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	e0b0      	b.n	8003ef0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	76bb      	strb	r3, [r7, #26]
 8003d92:	e0ad      	b.n	8003ef0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9c:	d15c      	bne.n	8003e58 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003d9e:	7efb      	ldrb	r3, [r7, #27]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d828      	bhi.n	8003df6 <UART_SetConfig+0x3fe>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <UART_SetConfig+0x3b4>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003de1 	.word	0x08003de1
 8003db8:	08003df7 	.word	0x08003df7
 8003dbc:	08003de7 	.word	0x08003de7
 8003dc0:	08003df7 	.word	0x08003df7
 8003dc4:	08003df7 	.word	0x08003df7
 8003dc8:	08003df7 	.word	0x08003df7
 8003dcc:	08003def 	.word	0x08003def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd0:	f7fe fe9a 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8003dd4:	6178      	str	r0, [r7, #20]
        break;
 8003dd6:	e013      	b.n	8003e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7fe feac 	bl	8002b34 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	6178      	str	r0, [r7, #20]
        break;
 8003dde:	e00f      	b.n	8003e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de0:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <UART_SetConfig+0x510>)
 8003de2:	617b      	str	r3, [r7, #20]
        break;
 8003de4:	e00c      	b.n	8003e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de6:	f7fe fdf7 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8003dea:	6178      	str	r0, [r7, #20]
        break;
 8003dec:	e008      	b.n	8003e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df2:	617b      	str	r3, [r7, #20]
        break;
 8003df4:	e004      	b.n	8003e00 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	76bb      	strb	r3, [r7, #26]
        break;
 8003dfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d074      	beq.n	8003ef0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	005a      	lsls	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	441a      	add	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b0f      	cmp	r3, #15
 8003e22:	d916      	bls.n	8003e52 <UART_SetConfig+0x45a>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2a:	d212      	bcs.n	8003e52 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f023 030f 	bic.w	r3, r3, #15
 8003e34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	89fb      	ldrh	r3, [r7, #14]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	89fa      	ldrh	r2, [r7, #14]
 8003e4e:	60da      	str	r2, [r3, #12]
 8003e50:	e04e      	b.n	8003ef0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	76bb      	strb	r3, [r7, #26]
 8003e56:	e04b      	b.n	8003ef0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e58:	7efb      	ldrb	r3, [r7, #27]
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d827      	bhi.n	8003eae <UART_SetConfig+0x4b6>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <UART_SetConfig+0x46c>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08003eaf 	.word	0x08003eaf
 8003e74:	08003e9f 	.word	0x08003e9f
 8003e78:	08003eaf 	.word	0x08003eaf
 8003e7c:	08003eaf 	.word	0x08003eaf
 8003e80:	08003eaf 	.word	0x08003eaf
 8003e84:	08003ea7 	.word	0x08003ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e88:	f7fe fe3e 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8003e8c:	6178      	str	r0, [r7, #20]
        break;
 8003e8e:	e013      	b.n	8003eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e90:	f7fe fe50 	bl	8002b34 <HAL_RCC_GetPCLK2Freq>
 8003e94:	6178      	str	r0, [r7, #20]
        break;
 8003e96:	e00f      	b.n	8003eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <UART_SetConfig+0x510>)
 8003e9a:	617b      	str	r3, [r7, #20]
        break;
 8003e9c:	e00c      	b.n	8003eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9e:	f7fe fd9b 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8003ea2:	6178      	str	r0, [r7, #20]
        break;
 8003ea4:	e008      	b.n	8003eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eaa:	617b      	str	r3, [r7, #20]
        break;
 8003eac:	e004      	b.n	8003eb8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	76bb      	strb	r3, [r7, #26]
        break;
 8003eb6:	bf00      	nop
    }

    if (pclk != 0U)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d018      	beq.n	8003ef0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	085a      	lsrs	r2, r3, #1
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	441a      	add	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b0f      	cmp	r3, #15
 8003ed8:	d908      	bls.n	8003eec <UART_SetConfig+0x4f4>
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d204      	bcs.n	8003eec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	e001      	b.n	8003ef0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003efc:	7ebb      	ldrb	r3, [r7, #26]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bdb0      	pop	{r4, r5, r7, pc}
 8003f06:	bf00      	nop
 8003f08:	00f42400 	.word	0x00f42400

08003f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01a      	beq.n	8004022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400a:	d10a      	bne.n	8004022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af02      	add	r7, sp, #8
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004060:	f7fc ff72 	bl	8000f48 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b08      	cmp	r3, #8
 8004072:	d10e      	bne.n	8004092 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f82d 	bl	80040e2 <UART_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e023      	b.n	80040da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d10e      	bne.n	80040be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f817 	bl	80040e2 <UART_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e00d      	b.n	80040da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f2:	e05e      	b.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d05a      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fc:	f7fc ff24 	bl	8000f48 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	429a      	cmp	r2, r3
 800410a:	d302      	bcc.n	8004112 <UART_WaitOnFlagUntilTimeout+0x30>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11b      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004120:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e043      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d02c      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004166:	d124      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004170:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004180:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e00f      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d091      	beq.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4d0d      	ldr	r5, [pc, #52]	; (8004214 <__libc_init_array+0x38>)
 80041e0:	4c0d      	ldr	r4, [pc, #52]	; (8004218 <__libc_init_array+0x3c>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	2600      	movs	r6, #0
 80041e8:	42a6      	cmp	r6, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	4d0b      	ldr	r5, [pc, #44]	; (800421c <__libc_init_array+0x40>)
 80041ee:	4c0c      	ldr	r4, [pc, #48]	; (8004220 <__libc_init_array+0x44>)
 80041f0:	f000 f820 	bl	8004234 <_init>
 80041f4:	1b64      	subs	r4, r4, r5
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	2600      	movs	r6, #0
 80041fa:	42a6      	cmp	r6, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f855 3b04 	ldr.w	r3, [r5], #4
 8004204:	4798      	blx	r3
 8004206:	3601      	adds	r6, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f855 3b04 	ldr.w	r3, [r5], #4
 800420e:	4798      	blx	r3
 8004210:	3601      	adds	r6, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	080cad64 	.word	0x080cad64
 8004218:	080cad64 	.word	0x080cad64
 800421c:	080cad64 	.word	0x080cad64
 8004220:	080cad68 	.word	0x080cad68

08004224 <memset>:
 8004224:	4402      	add	r2, r0
 8004226:	4603      	mov	r3, r0
 8004228:	4293      	cmp	r3, r2
 800422a:	d100      	bne.n	800422e <memset+0xa>
 800422c:	4770      	bx	lr
 800422e:	f803 1b01 	strb.w	r1, [r3], #1
 8004232:	e7f9      	b.n	8004228 <memset+0x4>

08004234 <_init>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	bf00      	nop
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr

08004240 <_fini>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr
